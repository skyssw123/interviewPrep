public class Main {
	enum State
	{
		Unvisited,
		Visiting,
		Visited
	};
	
	boolean search(Graph g, Node start, Node end)
	{
		return false;
	}
	
	public static void main(String[] args) {
		Node a = new Node(0);
		Node b = new Node(1);
		Node c = new Node(2);
		Node d = new Node(3);
		Node e = new Node(4);
		Node f = new Node(5);
		a.setAdjacent( new Node[]{b, e, f} );
		b.setAdjacent( new Node[]{d, e} );
		c.setAdjacent( new Node[]{b} );
		d.setAdjacent( new Node[]{c, e} );
		e.setAdjacent( new Node[0] );
		f.setAdjacent(new Node[0]);
		
		Node k = new Node(19);
		Graph g = new Graph(new Node[] {a, b, c, d, e, f, k});
		
		System.out.println(search());
	}
	
	
	
	
	//Class Graph
	public static class Graph
	{
		Node[] nodes;
		Graph(Node[] nodes)
		{
			this.nodes = nodes;
		}
		
		public Node[] getNodes()
		{
			return nodes;
		}
	}
	
	//Class Node
	public static class Node
	{
		public int data;
		public int state; 
		Node[] adjacent;
		Node(int data)
		{
			this.data = data;
			this.state = state;
			this.adjacent = adjacent;
		}
		
		public Node[] getAdjacent()
		{
			return adjacent;
		}
		
		public void setAdjacent(Node[] adjacent)
		{
			this.adjacent = adjacent;
		}
	}
}


