
public class Main {
	
	//Time Complexity: O(log(n))
	public static int binarySearch(int[] a, int x)
	{
		int low = 0;
		int high = a.length - 1;
		while(low <= high)
		{
			int mid = (low + high) / 2 ;
			if(a[mid] == x)
				return mid;
			else if(a[mid] > x)
				high = mid - 1;
			else
				low = mid + 1;
		}
		return -1;
	}
	
	//Time Complexity: O(log(n))
	public static int binarySearch_recursive(int[] a, int x)
	{
		return binarySearch_recursive(a, x, 0, a.length-1);
	}
	public static int binarySearch_recursive(int[] a, int x, int low, int high)
	{
		if(low > high)
			return -1;
		int mid = (low+high)/2;
		if(a[mid] == x)
			return mid;
		else if(a[mid] > x)
			binarySearch_recursive(a, x, low, mid-1);
		else
			binarySearch_recursive(a, x, mid+1, high);
		return -1;
	}
	public static void main(String[] args) {
		int[] a = {1, 3, 8, 11,17, 19, 21, 23};
		System.out.println(binarySearch(a, 19)); // Expected: 5
		System.out.println(binarySearch(a, 21)); // Expected: 6
		System.out.println(binarySearch(a, 23)); // Expected: 7
		System.out.println(binarySearch(a, 1)); // Expected: 0
		System.out.println(binarySearch(a, 3)); // Expected: 1
		
		System.out.println(binarySearch(a, 7)); // Expected: -1
		System.out.println(binarySearch(a, 29)); // Expected: -1
		System.out.println(binarySearch(a, 7)); // Expected: -1
		
		System.out.println("\n Solution_Recursive:");
		System.out.println(binarySearch_recursive(a, 19)); // Expected: 5
		System.out.println(binarySearch_recursive(a, 21)); // Expected: 6
		System.out.println(binarySearch_recursive(a, 23)); // Expected: 7
		System.out.println(binarySearch_recursive(a, 1)); // Expected: 0
		System.out.println(binarySearch_recursive(a, 3)); // Expected: 1
		
		System.out.println(binarySearch_recursive(a, 7)); // Expected: -1
		System.out.println(binarySearch_recursive(a, 29)); // Expected: -1
		System.out.println(binarySearch_recursive(a, 7)); // Expected: -1
	}

}
