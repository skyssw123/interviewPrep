import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Main {
  public static class Graph
  {
    public ArrayList<Station> stations;
    public HashMap<Integer, Station> hashMapStations;
    public Stack<Station> stack;
    
    public Graph()
    {
      this.stations = new ArrayList<Station>();
      this.hashMapStations = new HashMap<Integer, Station> ();
      this.stack = new Stack<Station> ();
    }
    
    public void addNextStations(int pickUp, int dropOff)
    {
      Station pickUpstation;
      if(!hashMapStations.containsKey(pickUp))
      {
        pickUpstation = new Station(pickUp);
        hashMapStations.put(pickUp, pickUpstation);
        stations.add(pickUpstation);
      }
      else
        pickUpstation = hashMapStations.get(pickUp);
      
      Station dropOffstation;
      if(!hashMapStations.containsKey(dropOff))
      {
        dropOffstation = new Station(dropOff);
        hashMapStations.put(dropOff, dropOffstation);
        stations.add(dropOffstation);
      }
      else
        dropOffstation = hashMapStations.get(dropOff);
      
      pickUpstation.addNextStation(dropOffstation);
    }
  }
  
  public static class Station implements Comparable<Station>
  {
    public enum State 
    {
      VISITED, UNVISITED;
    }
    
    public int stationNumber = -1;
    public State state = State.UNVISITED;
    private ArrayList<Station> nextStations = null;
    private HashMap<Integer, Station> hashMap = null;
    public Station(int stationNumber)
    {
      this.stationNumber = stationNumber;
      this.nextStations = new ArrayList<Station>();
      this.hashMap = new HashMap<Integer, Station>();
    }
    
    public ArrayList<Station> getNextStations()
    {
      return this.nextStations;
    }
    
    public void addNextStation(Station nextStation)
    {
    	if(!this.hashMap.containsKey(nextStation.stationNumber))
    	{
    		this.nextStations.add(nextStation);
    		this.hashMap.put(nextStation.stationNumber, nextStation);
        	Collections.sort(this.nextStations);
        	
        	for(int i = 0; i < this.nextStations.size() - 1 ; i++)
        	{
        		Station stationNext1 = this.nextStations.get(i);    
        		Station stationNext2 = this.nextStations.get(i+1);
        		if(!stationNext1.hashMap.containsKey(stationNext2.stationNumber))
        		{
        			stationNext1.hashMap.put(stationNext2.stationNumber, stationNext2);
        			stationNext1.nextStations.add(stationNext2);
        		}
        	}
    	}
    }
    
    @Override
    public int compareTo(Station other)
    {
    	if(other.stationNumber < this.stationNumber)   // value 1 : {.. other, this ...}
    		return 1;
    	else if (other.stationNumber > this.stationNumber) // value -1 : {.. this, other ..}
    		return -1;
    	else
    		return 0;
    }
  }
  
  public static void schedulePickup(int pickUp, int dropOff, Graph graph)
  {
    graph.addNextStations(pickUp, dropOff);
  }
  
  public static Stack<Station> getPath(Station station, Stack<Station> stack)
  {
    if(station == null)
      return null;
    
      if(station.state == Station.State.UNVISITED)
      {
        for(Station nextStation: station.getNextStations())
        {
          if(nextStation.state== Station.State.UNVISITED)
          {
            Stack<Station> path = getPath(nextStation, stack);
          }
        }
        station.state = Station.State.VISITED;
        stack.add(station);
      }
      return stack;
  }
  
  public static void updatePath(Graph graph)
  {
    if(graph == null)
      return;
    
    for(Station station: graph.stations)
    {
      if(station.state == Station.State.UNVISITED)
      {
        graph.stack = getPath(station, graph.stack);
      }
    }
    
    return;
  }
  
  
  public static void printNextStations(Graph g)
  {
    // pop from the stack to get the next station.
    while(!g.stack.isEmpty())
    {
      System.out.println(g.stack.pop().stationNumber);
    }
  }
  
  public static void main(String[] args) 
  {
    Graph graph = new Graph();
    
    //schedulePickup(1,2, graph);
    //schedulePickup(2,3, graph);
    //schedulePickup(3,4, graph);
    
    schedulePickup(1, 3, graph); 
    schedulePickup(1, 4, graph);
    schedulePickup(3, 2, graph);
    
    // 1 -> 3 -> 4 -> 2 -> 2
    updatePath(graph);
    printNextStations(graph);
  }
}
