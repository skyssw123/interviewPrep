import java.io.*;
import java.util.*;

/*
 * To execute Java, please define "static void main" on a class
 * named Solution.
 *
 * If you need more classes, simply define them inline.
 */

class Main {
  public static class Graph
  {
    public ArrayList<Station> stations;
    public HashMap<Integer, Station> hashMapStations;
    public LinkedList<Station> queue;
    
    public Graph()
    {
      this.stations = new ArrayList<Station>();
      this.hashMapStations = new HashMap<Integer, Station> ();
      this.queue = new LinkedList<Station> ();
    }
    
    public void addNextStations(int pickUp, int dropOff)
    {
      Station pickUpstation;
      if(!hashMapStations.containsKey(pickUp))
      {
        pickUpstation = new Station(pickUp);
        hashMapStations.put(pickUp, pickUpstation);
        stations.add(pickUpstation);
      }
      else
        pickUpstation = hashMapStations.get(pickUp);
      
      Station dropOffstation;
      if(!hashMapStations.containsKey(dropOff))
      {
        dropOffstation = new Station(dropOff);
        hashMapStations.put(dropOff, dropOffstation);
        stations.add(dropOffstation);
      }
      else
        dropOffstation = hashMapStations.get(dropOff);
      
      
      pickUpstation.addNextStation(dropOffstation);
    }
  }
  
  public static class Station implements Comparable<Station>
  {
    public int stationNumber = -1;
    private ArrayList<Station> nextStations = null;
    public Station(int stationNumber)
    {
      this.stationNumber = stationNumber;
      this.nextStations = new ArrayList<Station>();
    }
    
    public ArrayList<Station> getNextStations()
    {
      return this.nextStations;
    }
    
    public void addNextStation(Station nextStation)
    {
    	this.nextStations.add(nextStation);
    }
    
    @Override
    public int compareTo(Station other)
    {
    	if(other.stationNumber < this.stationNumber)   // value 1 : {.. other, this ...}
    		return 1;
    	else if (other.stationNumber > this.stationNumber) // value -1 : {.. this, other ..}
    		return -1;
    	else
    		return 0;
    }
  }
  
  public static void schedulePickup(int pickUp, int dropOff, Graph graph)
  {
    graph.addNextStations(pickUp, dropOff);
  }
  
  
  
  public static int printNextStations(Graph g)
  {  
	  if(g == null || g.stations == null)
		  return -1;
	  if(g.queue.isEmpty())
	  {
		  Collections.sort(g.stations);
		  g.queue.add(g.stations.get(0));
	  }
	  
	  Station station = g.queue.pop();
	  Collections.sort(station.nextStations);
	  for(Station nextStation: station.nextStations)
	  {
		  if(!g.queue.contains(nextStation))
			  g.queue.add(nextStation);
	  }
	  if(g.queue.isEmpty())
		  g.queue.add(station);
	  return station.stationNumber;
  }
  
  public static void main(String[] args) 
  {
    Graph graph = new Graph();
    
    schedulePickup(1, 3, graph); 
    schedulePickup(1, 4, graph);
    schedulePickup(3, 2, graph);
    
    // 1 -> 3 -> 4 -> 2 -> 2
    printNextStations(graph);
    
    listAllDependencies(graph);
  }
  
  public static void listAllDependencies(Graph graph)
  {
	  for(Station station: graph.stations)
	  {
		  System.out.println("Station : " + station.stationNumber);
		  for(Station nextstation: station.nextStations)
		  {
			  System.out.println(nextstation.stationNumber);
		  }
		  System.out.println();
	  }
  }
}
